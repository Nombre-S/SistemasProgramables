# Solución que muestra en una pantalla oled 128x64
# la temperatura interna de la pico w, y dependiendo
# de la temperatura se despliega una imagen relacionada.
# La temperatura es desplegada en Celcius y Farenheit.

# Soto García Alejandro - 20212433
# Sistemas Programables

from machine import Pin, I2C, ADC
from ssd1306 import SSD1306_I2C
import framebuf, sys
import time

pix_res_x = 128
pix_res_y = 64

def init_i2c(scl_pin, sda_pin):
    # Inicialización del dispositivo I2C
    i2c_dev = I2C(1, scl=Pin(scl_pin), sda=Pin(sda_pin), freq=200000)
    i2c_addr = [hex(ii) for ii in i2c_dev.scan()]
    
    if not i2c_addr:
        print('No I2C Display Found')
        sys.exit()
    else:
        print("I2C Address      : {}".format(i2c_addr[0]))
        print("I2C Configuration: {}".format(i2c_dev))
    
    return i2c_dev

# Función que recive como parametros el display oled y la temperatura interna.
def display_logo(oled,temp):
    
    # Imagenes a desplegar dependiendo de la temperatura convertidas a byte array.
    cold = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x02, 0x43, 0xc2, 0x40, 0x03, 0xc1, 0x83, 0x80, 
            0x01, 0xc1, 0x07, 0x80, 0x03, 0xc1, 0x07, 0xc0, 0x01, 0xe1, 0x07, 0x80, 0x00, 0x31, 0x08, 0x00, 
            0x00, 0x19, 0x10, 0x00, 0x00, 0x0d, 0x20, 0x00, 0x06, 0x07, 0xc0, 0x30, 0x07, 0x07, 0xc0, 0xe0, 
            0x1f, 0xff, 0xff, 0xfc, 0x06, 0x07, 0xc0, 0x60, 0x04, 0x07, 0xe0, 0x30, 0x00, 0x09, 0x30, 0x00, 
            0x00, 0x11, 0x18, 0x00, 0x00, 0xe1, 0x0e, 0x00, 0x03, 0xe1, 0x07, 0x80, 0x01, 0xe1, 0x07, 0x00, 
            0x01, 0xc1, 0x87, 0x80, 0x02, 0x43, 0xc4, 0x80, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 
            0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    
    warm = [0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x3f, 0xff, 0xfe, 0x0e, 0x1f, 0xff, 0xfe, 0x0e, 0x18, 0x7f, 
            0xfe, 0x06, 0x18, 0x7f, 0xff, 0x02, 0x10, 0x3f, 0xff, 0x82, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 
            0xff, 0xc0, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x7f, 
            0xff, 0xf0, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 
            0xfe, 0x07, 0x00, 0x7f, 0xfc, 0x1f, 0xc0, 0x7f, 0xfc, 0x3f, 0xe0, 0x7f, 0xfc, 0x3f, 0xe0, 0x7f, 
            0xfe, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xf0, 0xff, 0xfe, 0xff, 0xf0, 0x7f, 0xfc, 0x3f, 0xe0, 0xff, 
            0xfc, 0x3f, 0xe0, 0xff, 0xfc, 0x1f, 0xc0, 0xff, 0xfe, 0x07, 0x01, 0xff, 0xfe, 0x00, 0x03, 0xff, 
            0xff, 0x00, 0x07, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff]

    hot = [0x00, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x01, 0xff, 0xff, 0xc0, 
           0x03, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 
           0x1f, 0xdf, 0xfe, 0xfc, 0x1f, 0x3f, 0xff, 0x3c, 0x3e, 0xff, 0xff, 0x9e, 0x3f, 0xff, 0xff, 0xfe, 
           0x3f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xe3, 0xf1, 0xff, 
           0x3f, 0xe3, 0xf1, 0xff, 0x3f, 0xe3, 0xf1, 0xfe, 0x3f, 0xf7, 0xfb, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 
           0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0xff, 0x7c, 0x0f, 0xf8, 0xff, 0x78, 0x07, 0xf8, 
           0xff, 0x73, 0xf3, 0xf0, 0x7e, 0x73, 0xf3, 0xe0, 0x3c, 0x7f, 0xff, 0xc0, 0x00, 0x37, 0xff, 0x00, 
           0x00, 0x13, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x01, 0xe0, 0x00]

    # Declaración if que compara la temperatura interna en celcius con un numero arbitrario 16.
    if temp <= 16:
        # Se selecciona la imagen que representa el frio.
        image = cold
    # Declaración elif que compara la temperatura interna en celcius con un numero arbitrario 17 y 29.
    elif temp >= 17 and temp <= 29:
        # Se selecciona la imagen que representa la temperatura normal.
        image = warm
    # Declaración eliif que compara la temperatura interna en celcius con un numero arbitrario 30.
    elif temp >= 30:
        # Se selecciona la imagen que representa la temperatura caliente.
        image = hot

    buffer = bytearray(image)
    fb = framebuf.FrameBuffer(buffer, 32, 32, framebuf.MONO_HLSB)
    
    oled.fill(0)
    oled.blit(fb, 50,30)
    oled.show()

def display_text(oled):
    adc = machine.ADC(4) 
    while True:
        ADC_voltage = adc.read_u16() * (3.3 / (65535))
        temperature_celcius = 27 - (ADC_voltage - 0.706)/0.001721
        temp_fahrenheit=32+(1.8*temperature_celcius)
        oled.text(f"Temperatura: ", 5, 5)
        oled.text(f"{temperature_celcius:.3f}C {temp_fahrenheit:.3f}F", 5, 15)
        oled.show()
        time.sleep(3)
        oled.fill(0)
        display_logo(oled, temperature_celcius)

def get_temp():
    adc = machine.ADC(4)
    ADC_voltage = adc.read_u16() * (3.3 / (65535))
    temperature_celcius = 27 - (ADC_voltage - 0.706)/0.001721
    return temperature_celcius

def main():
    i2c_dev = init_i2c(scl_pin=27, sda_pin=26)
    oled = SSD1306_I2C(pix_res_x, pix_res_y, i2c_dev)
    display_text(oled)
    display_logo(oled, get_temp())


if __name__ == '__main__':
    main()
